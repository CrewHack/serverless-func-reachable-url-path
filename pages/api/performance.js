import chrome from "chrome-aws-lambda";
import puppeteer from "puppeteer";
const isDev = process.env.NODE_ENV === "development";
/**
 * In order to have the function working in both windows and macOS
 * we need to specify the respecive path of the chrome executable for
 * both cases.
 */
const exePath =
  process.platform === "win32"
    ? "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
    : "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome";
export const getOptions = async isDev => {
  /**
   * If used in a dev environment, i.e. locally, use one of the local
   * executable path
   */
  if (isDev) {
    return {
      args: [],
      executablePath: exePath,
      headless: true,
    };
  }
  /**
   * Else, use the path of chrome-aws-lambda and its args
   */
  return {
    args: chrome.args,
    executablePath: await chrome.executablePath,
    headless: chrome.headless,
  };
};
export const getScreenshot = async (req, res) => {

  var url = "https://allied-techs.com";

  const options = await getOptions(isDev);
  const browser = await puppeteer.launch(options);
  //const page = await browser.newPage();
  /**
   * Here we set the viewport manually to a big resolution
   * to ensure the target,i.e. our code snippet image is visible
   */
  /*await page.setViewport({
    width: 2560,
    height: 1080,
    deviceScaleFactor: 2,
  });*/
  /**
   * Navigate to the url generated by getCarbonUrl
   */
  
  //await page.goto(url, { waitUntil: "load" });

  res.statusCode = 200
  res.json({ chromiumPath: "test" })

  return { res };
};

export default getScreenshot;